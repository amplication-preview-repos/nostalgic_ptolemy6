/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Rsvp as PrismaRsvp,
  Event as PrismaEvent,
  User as PrismaUser,
} from "@prisma/client";

export class RsvpServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RsvpCountArgs, "select">): Promise<number> {
    return this.prisma.rsvp.count(args);
  }

  async rsvps(args: Prisma.RsvpFindManyArgs): Promise<PrismaRsvp[]> {
    return this.prisma.rsvp.findMany(args);
  }
  async rsvp(args: Prisma.RsvpFindUniqueArgs): Promise<PrismaRsvp | null> {
    return this.prisma.rsvp.findUnique(args);
  }
  async createRsvp(args: Prisma.RsvpCreateArgs): Promise<PrismaRsvp> {
    return this.prisma.rsvp.create(args);
  }
  async updateRsvp(args: Prisma.RsvpUpdateArgs): Promise<PrismaRsvp> {
    return this.prisma.rsvp.update(args);
  }
  async deleteRsvp(args: Prisma.RsvpDeleteArgs): Promise<PrismaRsvp> {
    return this.prisma.rsvp.delete(args);
  }

  async getEvent(parentId: string): Promise<PrismaEvent | null> {
    return this.prisma.rsvp
      .findUnique({
        where: { id: parentId },
      })
      .event();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.rsvp
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
